File:

builder.py
Class - None
Unmoved methods:
	def create_default_background(): default background just generates the background
	def main(): main func dont move

builder_controller.py
Class - None
Unmoved methods:
	def mouse_to_tile: controls mouse movement no class needed
	def create_new_entity: intital render of world no class needed
	def is_background_tile: checks background tile no class needed

controller.py
Class - None
Unmoved methods:
	def on_keydown: control for key function interaction with pygame no class needed
	def mouse_to_tile: control for mouse on tile with pygame no class needed
	def activity_loop: part of pygame setup no class needed

entities.py
Class:
Background - 
methods:
	def __init__():
	def get_name():
	def next_image():
	def get_image():
MinerNotFull -
methods:
	def __init__
	def set_position
	def get_position
	def get_images
	def get_rate
	def set_resource_count
	def get_resource_count
	def get_resource_limit
	def get_name
	def get_animation_rate
	def remove_pending_action
	def add_pending_action
	def get_pending_actions
	def clear_pending_actions
	def next_image
	def entity_string
	def miner_to_ore
	def get_image
MinerFull - 
methods:
	def __init__
	def set_position
	def get_position
	def get_images
	def get_rate
	def set_resource_count
	def get_resource_count
	def get_resource_limit
	def get_name
	def get_animation_rate
	def remove_pending_action
	def add_pending_action
	def get_pending_actions
	def clear_pending_actions
	def next_image
	def miner_to_ore
	def get_image
Vein -
methods:
	def __init__def set_position
	def get_position
	def get_images
	def get_rate
	def set_resource_count
	def get_resource_count
	def get_resource_limit
	def get_name
	def get_animation_rate
	def remove_pending_action
	def add_pending_action
	def get_pending_actions
	def clear_pending_actions
	def next_image
	def entity_string
	def miner_to_ore
	def get_image
Ore -
methods:
	def __init__
	def set_position
	def get_position
	def get_images
	def get_rate
	def get_name
	def remove_pending_action
	def add_pending_action
	def get_pending_actions
	def clear_pending_actions
	def next_image
	def entity_string
	def get_image

Blacksmith - 
methods:
	def __init__
	def set_position
	def get_position
	def get_images
	def get_rate
	def set_resource_count
	def get_resource_count
	def get_resource_limit
	def get_resource_distance
	def get_name
	def remove_pending_action
	def add_pending_action
	def get_pending_actions
	def clear_pending_actions
	def next_image
	def entity_string
	def get_image
OreBlob - 
methods:
	def __init__
	def set_position
	def get_position
	def get_images
	def get_rate
	def get_name
	def get_animation_rate
	def remove_pending_action
	def add_pending_action
	def get_pending_actions
	def clear_pending_actions
	def next_image
	def entity_string
	def blob_to_vein
	def get_image
Quake - 
methods:
	def __init__
	def set_position
	def get_position
	def get_images
	def get_name
	def get_animation_rate
	def remove_pending_action
	def add_pending_action
	def get_pending_actions
	def clear_pending_actions
	def next_image
	def entity_string
	def get_image
Unmoved methods:
	def get_image necesary for a method in world that class get image of the grid position of background class
	def sign convention for positive and negative values
	def adjacent check for adjacency of pts

image_store.py
Class - none
Unmoved methods:
	def create_default_image creates default image for py game no class needed
	def load_images loads images from default file no class needed
	def process_image_line no class needed
	def get_images_internal pulls images from internal file no class needed
	def get_images gets images and name for images no class needed

main.py
Class - none
Unmoved methods:
	def create_default_background creates default background no class needed
	def load_world load world from world file no class needed
	def main main executing func no class needed

occ_grid.py
Class: 
Grid -
methods:
	def __init__
	def set_cell
	def get_cell
Unmoved methods - none

ordered_lists.py
Class:
OrderedList -
methods:
	def __init__
	def insert
	def remove
	def head
	def pop

ListItem-
methods:
	def __init__
	def __eq__
Unmoved methods - none

point.py
Class:
Point -
methods:
	def __init__
Unmoved methods - none



save_load.py
Class - none
Unmoved methods:
	def create_from_properties creates world from properties no class needed
	def create_miner original load of miner from properties no class needed
	def create_vein original load of vein from properties no class needed
	def create_ore  original load of ore from properties no class needed
	def create_blacksmith original load of blacksmiths from properties no class needed
	def create_obstacle original load of obstacles from properties no class needed

worldmodel.py
Class:
WorldModel:
methods - 
	def __init__
	def within_bounds
	def find_nearest
	def is_occupied
	def add_entity
	def move_entity
	def remove_entity
	def remove_entity_at
	def schedule_action
	def unschedule_action
	def update_on_time
	def get_background_image
	def get_background
	def set_background 
	def get_tile_occupant
	def get_entities
	def next_position
	def blob_next_position
	def create_miner_not_full_action
	def create_miner_full_action
	def create_miner_action
	def schedule_miner
	def schedule_action_2
	def schedule_animation
	def create_animation_action
	def create_ore_blob_action
	def find_open_around
	def create_vein_action
	def try_transform_miner_full
	def try_transform_miner_not_full
	def try_transform_miner
	def create_entity_death_action
	def create_ore_transform_action
	def remove_entity_2
	def create_blob
	def schedule_blob
	def create_ore
	def schedule_ore
	def create_quake
	def schedule_quake
	def create_vein
	def schedule_vein
	def clear_pending_actions_2
	def save_world
	def save_entities
	def save_background
	def load_world
	def add_background
	def add_entity_2
	def schedule_entity
	def on_keydown_2
	def save_world_2
	def load_world_2
Unmoved methods:
	def nearest_entity checks nearest entity no class needed
	def distance_sq distance fomula no class needed
	def sign positive and negative number function no class needed
	def adjacent checks adjacency no class needed

worldview.py
Class:
WorldView:
methods - 
	def __init__
	def draw_background
	def draw_entities
	def draw_viewport
	def update_view
	def update_view_tiles
	def update_tile
	def get_tile_image
	def create_mouse_surface
	def update_mouse_cursor
	def mouse_move
	def handle_timer_event
	def handle_mouse_motion
	def handle_keydown
	def activity_loop
	def handle_mouse_motion
	def handle_keydown_2
	def activity_loop_2
	def handle_mouse_button
Unmoved methods:
	def viewport_to_world relates vieport and world no classes needed
	def world_to_viewport relates world and viewport no classes needed
	def clamp defines a max and min no class needed
	def create_shifted_viewport creates a shifted view point


